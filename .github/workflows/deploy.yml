---
name: Deploy Infrastructure and Web Application

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      job_environment:
        type: choice
        description: 'Job environment prod or dev'
        required: true
        default: 'dev'
        options:
          - dev
          - prod
      region:
        type: choice
        description: 'Chose Region'
        required: true
        default: 'eu-central-1'
        options:
          - us-east-1
          - us-west-2
          - eu-central-1
      vm_size:
        type: choice
        description: 'Droplet/VM size'
        required: true
        default: 't2.micro'
        options:
          - t2.micro
          - t2.small
          - t2.medium
          - t3.micro
          - t3.small
          - t3.medium
      DB_NAME:
        type: string
        description: 'Input db name'
        required: true
        default: 'mydatabase'
      DB_USER:
        type: string
        description: 'Input db username'
        required: true
        default: 'root'
      DB_PASS:
        type: string
        description: 'Input db password'
        required: true
        default: 'dppass'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  IMAGE_NAME: 'web_app-ghcr'
  TF_VAR_IMAGE_VERSION: ${{github.run_number}}
  TF_VAR_ENVIRONMENT: ${{ inputs.job_environment }}
  TF_VAR_db_user: ${{ secrets.WORK_DB_USER }}
  TF_VAR_db_pass: ${{ secrets.WORK_DB_PASS }}
  TF_VAR_db_name: ${{ secrets.WORK_DB_NAME }}
  DOCKER_PASSWORD: ${{ secrets.TOKEN_GITHUB }}
  BRANCH_NAME: ${{ github.ref_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    container:
      image: ghcr.io/banigoden/make_docker:latest
      env:
        registry-username: ${{github.actor}}
        registry-password: ${{secrets.GITHUB_TOKEN}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.6.0
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:v${{ env.IMAGE_VERSION }} .
        working-directory: deployment/docker

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ./deployment/docker
          push: true
          tags: ghcr.io/banigoden/${{ env.IMAGE_NAME }}:v${{ github.run_number }}
          labels: |
            org.opencontainers.image.source=https://github.com/banigoden/Python_Web_GitHub_Actions
            org.opencontainers.image.version=${{ github.run_number }}

      - name: Scan the Docker image with Grype
        uses: anchore/scan-action@v3.3.6
        with:
          image: ghcr.io/banigoden/${{ env.IMAGE_NAME }}:v$GITHUB_RUN_NUMBER
          fail-build: false
          output-format: table
          only-fixed: true

      # - name: Install make, tfmask, ansible and AWS CLI
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y make wget
      #     sudo wget https://github.com/cloudposse/tfmask/releases/download/0.7.0/tfmask_linux_amd64 -O /usr/bin/tfmask
      #     sudo chmod 755 /usr/bin/tfmask
      #     sudo apt-get install -y awscli
      #     python -m pip install --upgrade pip
      #     pip install ansible

      # - name: Use custom Docker image
      #   uses: docker://ghcr.io/banigoden/makeansible:latest

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ github.event.inputs.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Initialize Terraform
        id: init
        run: make init
        working-directory: deployment/terraform

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: deployment/terraform

      - name: Terraform validate
        id: validate
        run: make validate
        working-directory: deployment/terraform

      - name: Select workspace
        run: make workspace
        working-directory: deployment/terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: deployment/terraform

      - name: Run Ansible Playbook
        # yamllint disable-line rule:line-length
        run: ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook playbook.yml --private-key EC2-web_app.pem -i inventory/ansible-inventory --user ec2-user
        working-directory: deployment/ansible
